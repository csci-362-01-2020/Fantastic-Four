# POT file for the Calculate activity
# Copyright (C) 2007
# This file is distributed under the same license as the Calculate package.
# Reinier Heeres <reinier@heeres.eu>, 2007
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-24 17:39+1100\n"
"PO-Revision-Date: 2017-09-05 02:15+0000\n"
"Last-Translator: Chris <cjl@sugarlabs.org>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Generator: Pootle 2.5.1.1\n"
"X-POOTLE-MTIME: 1504577746.000000\n"

#: activity/activity.info:2
msgid "Calculate"
msgstr "Calculer"

#: functions.py:35
msgid "add"
msgstr "add"

#: functions.py:36
msgid "abs"
msgstr "abs"

# TRANS: It is possible to translate commands. However, I would highly
# recommend NOT doing so for mathematical functions like cos(). help(),
# functions() etc should be translated.
#: functions.py:37
msgid "acos"
msgstr "acos"

# TRANS: It is possible to translate commands. However, I would highly
# recommend NOT doing so for mathematical functions like cos(). help(),
# functions() etc should be translated.
#: functions.py:38
msgid "acosh"
msgstr "acosh"

#: functions.py:39
msgid "asin"
msgstr "asin"

#: functions.py:40
msgid "asinh"
msgstr "asinh"

#: functions.py:41
msgid "atan"
msgstr "atan"

#: functions.py:42
msgid "atanh"
msgstr "atanh"

#: functions.py:43
msgid "and"
msgstr "and"

#: functions.py:44
msgid "b10bin"
msgstr "b10bin"

#: functions.py:45
msgid "ceil"
msgstr "ceil"

#: functions.py:46
msgid "cos"
msgstr "cos"

#: functions.py:47
msgid "cosh"
msgstr "cosh"

#: functions.py:48
msgid "div"
msgstr "div"

#: functions.py:49
msgid "gcd"
msgstr "gcd"

#: functions.py:50
msgid "exp"
msgstr "exp"

#: functions.py:51
msgid "factorial"
msgstr "factorial"

#: functions.py:52
msgid "factorize"
msgstr "factoriser"

#: functions.py:53
msgid "floor"
msgstr "floor"

#: functions.py:54
msgid "inv"
msgstr "inv"

#: functions.py:55
msgid "is_int"
msgstr "is_int"

#: functions.py:56
msgid "is_prime"
msgstr "is_prime"

#: functions.py:57
msgid "ln"
msgstr "ln"

#: functions.py:58
msgid "log10"
msgstr "log10"

#: functions.py:59
msgid "mul"
msgstr "mul"

#: functions.py:60
msgid "or"
msgstr "or"

#: functions.py:61
msgid "rand_float"
msgstr "rand_float"

#: functions.py:62
msgid "rand_int"
msgstr "rand_int"

#: functions.py:63
msgid "round"
msgstr "round"

#: functions.py:64
msgid "sin"
msgstr "sin"

#: functions.py:65
msgid "sinh"
msgstr "sinh"

#: functions.py:66
msgid "sinc"
msgstr "sinc"

#: functions.py:67
msgid "sqrt"
msgstr "sqrt"

#: functions.py:68
msgid "sub"
msgstr "sub"

#: functions.py:69
msgid "square"
msgstr "square"

#: functions.py:70
msgid "tan"
msgstr "tan"

#: functions.py:71
msgid "tanh"
msgstr "tanh"

#: functions.py:72
msgid "xor"
msgstr "xor"

#: functions.py:119
msgid "abs(x), return absolute value of x, which means -x for x < 0"
msgstr "abs(x), retourne la valeur absolue de x, donc -x si x < 0"

#: functions.py:124
msgid "acos(x) only defined for x E [-1,1]"
msgstr "acos(x) seulement défini pour x E [-1,1]"

#: functions.py:128
msgid ""
"acos(x), return the arc cosine of x. This is the angle for which the cosine "
"is x. Defined for -1 <= x < 1"
msgstr ""
"acos (x), retourne l'arc cosinus de x. C'est l'angle dont le cosinus est x. "
"Seulement défini pour x E [-1,1]"

#: functions.py:135
msgid ""
"acosh(x), return the arc hyperbolic cosine of x. This is the value y for "
"which the hyperbolic cosine equals x."
msgstr ""
"acosh(x), retourne l'arc cosinus hyperbolique de x. C'est la valeur y dont "
"le cosinus hyperbolique cosh(y) est égal à x."

#: functions.py:142
msgid ""
"And(x, y), logical and. Returns True if x and y are True,else returns False"
msgstr ""
"And(x, y), \"et\" logique. Retourne True si x et y sont tous deux vrais, "
"c'est à dire égaux à True, sinon retourne False"

#: functions.py:151
msgid "add(x, y), return x + y"
msgstr "add(x, y), retourne x + y"

#: functions.py:156
msgid "asin(x) only defined for x E [-1,1]"
msgstr "asin(x) seulement défini pour x E [-1,1]"

#: functions.py:159
msgid ""
"asin(x), return the arc sine of x. This is the angle for which the sine is "
"x. Defined for -1 <= x <= 1"
msgstr ""
"asin(x), retourne l'arc sinus de x. C'est l'angle dont le sinus est égal à "
"x. Seulement défini pour x E [-1,1]"

#: functions.py:166
msgid ""
"asinh(x), return the arc hyperbolic sine of x. This is the value y for which "
"the hyperbolic sine equals x."
msgstr ""
"asinh(x), retourne l'arc hyperbolique sinus de x. C'est la valeur y dont le "
"sinus hyperbolique sinh(y) est égal à x."

#: functions.py:173
msgid ""
"atan(x), return the arc tangent of x. This is the angle for which the "
"tangent is x. Defined for all x"
msgstr ""
"atan(x), retourne l'arc tangente de x. C'est l'angle dont la tangente est x. "
"Défini pour toute valeur de x"

#: functions.py:180
msgid ""
"atanh(x), return the arc hyperbolic tangent of x. This is the value y for "
"which the hyperbolic tangent equals x."
msgstr ""
"atanh(x), renvoie l'arc hyperbolique tangent de x. C'est la valeur y dont la "
"tangente hyperbolique tanh(y) est égale à x."

#: functions.py:191
msgid "Number does not look binary."
msgstr "Le nombre ne semble pas exprimé en binaire."

#: functions.py:199
msgid ""
"b10bin(x), interpret a number written in base 10 as binary, e.g.: "
"b10bin(10111) = 23,"
msgstr ""
"b10bin(x), interprète un nombre écrit en base 10 comme un nombre binaire, "
"par ex. : b10bin(10111) = 23,"

#: functions.py:205
msgid "ceil(x), return the smallest integer larger than x."
msgstr "ceil(x), retourne le plus petit entier supérieur à x."

#: functions.py:211
msgid ""
"cos(x), return the cosine of x. This is the x-coordinate on the unit circle "
"at the angle x"
msgstr ""
"cos(x), renvoie le cosinus de x. C'est l'abscisse à l'angle x sur le cercle "
"unité"

#: functions.py:218
msgid ""
"cosh(x), return the hyperbolic cosine of x.Given by (exp(x) + exp(-x)) / 2"
msgstr ""
"cosh(x), retourne le cosinus hyperbolique de x. Donné par l'expression "
"(exp(x) + exp(-x)) / 2"

#: functions.py:224 functions.py:319
msgid "Can not divide by zero"
msgstr "Il est impossible de diviser par zéro"

#: functions.py:247
msgid "Invalid argument"
msgstr "Argument invalide"

#: functions.py:250
msgid ""
"gcd(a, b), determine the greatest common denominator of a and b. For "
"example, the biggest factor that is shared by the numbers 15 and 18 is 3."
msgstr ""
"gcd(a, b), détermine le plus grand commun diviseur de a et b. Par exemple, "
"le plus grand facteur commun aux nombres 15 et 18 est 3."

#: functions.py:257
msgid "exp(x), return the natural exponent of x. Given by e^x"
msgstr "exp(x), retourne l'exponentiel naturel de x. Donné par e^x"

#: functions.py:262
msgid "Factorial(x) is only defined for integers x>=0"
msgstr "Factorial(x) est seulement défini pour les entiers x>=0"

#: functions.py:265
msgid "Factorial only defined for integers"
msgstr "Factorial est uniquement définie pour des entiers"

#: functions.py:278
msgid ""
"factorial(n), return the factorial of n. Given by n * (n - 1) * (n - 2) * ..."
msgstr ""
"fac(x), retourne le factoriel de x. Donné par la formule x * (x - 1) * (x - "
"2) * ..."

#: functions.py:314
msgid "floor(x), return the largest integer smaller than x."
msgstr "floor(x), retourne le plus grand entier plus petit que x."

#: functions.py:321
msgid "inv(x), return the inverse of x, which is 1 / x"
msgstr "inv(x), renvoie l'inverse de x, qui est 1 / x"

#: functions.py:356
msgid "Argument must be int"
msgstr "L'argument doit être un entier"

#: functions.py:358
msgid "Prime numbers is defined for natural numbers"
msgstr "Les nombres premiers sont définis parmi les entiers naturels"

#: functions.py:368 functions.py:378
msgid "Logarithm(x) only defined for x > 0"
msgstr "Logarithm(x) uniquement défini pour x > 0"

#: functions.py:370
msgid ""
"ln(x), return the natural logarithm of x. This is the value for which the "
"exponent exp() equals x. Defined for x >= 0."
msgstr ""
"ln(x), retourne le logarithme naturel de x. C'est la valeur y dont "
"l'exponentielle exp(y) égale x. Défini pour x >= 0."

#: functions.py:380
msgid ""
"log10(x), return the base 10 logarithm of x. This is the value y for which "
"10^y equals x. Defined for x >= 0."
msgstr ""
"log10(x), retourne le logarithme décimal de x. Il s'agit de la valeur y pour "
"laquelle 10^y égale x. Défini pour x >= 0."

#: functions.py:388
msgid "Can only calculate x modulo <integer>"
msgstr "Il n'est possible de calculer que x modulo <un entier>"

#: functions.py:390
msgid ""
"mod(x, y), return the modulus of x with respect to y.This is the remainder "
"after dividing x by y."
msgstr ""
"mod(x, y), retourne x modulo y. C'est le reste de la division euclidienne de "
"x par y."

#: functions.py:399
msgid "mul(x, y), return x * y"
msgstr "mul(x, y), retourne x * y"

#: functions.py:404
msgid "negate(x), return -x"
msgstr "negate(x), retourne -x"

#: functions.py:410
msgid ""
"Or(x, y), logical or. Returns True if x or y is True, else returns False"
msgstr ""
"Or(x, y), \"ou\" logique. Retourne True si x ou y est égal à True, sinon, "
"retourne False"

#: functions.py:427
msgid "pow(x, y), return x to the power y (x**y)"
msgstr "pow(x, y), retourne x puissance y (noté x**y)"

#: functions.py:433
msgid "rand_float(), return a random floating point number between 0.0 and 1.0"
msgstr ""
"rand_float(), retourne un nombre à virgule flottante aléatoire compris entre "
"0,0 et 1,0"

#: functions.py:439
msgid ""
"rand_int([<maxval>]), return a random integer between 0 and <maxval>. "
"<maxval> is an optional argument and is set to 65535 by default."
msgstr ""
"rand_int([<maxval>]), retourne un entier aléatoire compris entre 0 et "
"<maxval>. <maxval> est un argument optionnel et prend la valeur 65535 par "
"défaut."

#: functions.py:445
msgid "round(x), return the integer nearest to x."
msgstr "round(x), retourne l'entier le plus proche de x."

#: functions.py:452 functions.py:461
msgid "Bitwise operations only apply to integers"
msgstr "Les opérations sur bits s'appliquent uniquement aux entiers"

#: functions.py:454
msgid "shift_left(x, y), shift x by y bits to the left (multiply by 2 per bit)"
msgstr ""
"shift_left(x, y), décale x de y bits à gauche (multiplication par 2^y, c'est "
"à dire par 2 pour chaque décalage de 1 bit)"

#: functions.py:463
msgid "shift_right(x, y), shift x by y bits to the right (divide by 2 per bit)"
msgstr ""
"shift_right(x, y), décale x de y bits à droite (division par 2^y, c'est à "
"dire par 2 pour chaque décalage de 1 bit)"

#: functions.py:469
msgid ""
"sin(x), return the sine of x. This is the y-coordinate on the unit circle at "
"the angle x"
msgstr ""
"sin(x), retourne le sinus de x. C'est l'ordonnée à l'angle x sur le cercle "
"unité"

#: functions.py:476
msgid ""
"sinh(x), return the hyperbolic sine of x. Given by (exp(x) - exp(-x)) / 2"
msgstr ""
"sinh(x), retourne le sinus hyperbolique de x. Donné par la formule (exp(x) - "
"exp(-x)) / 2"

#: functions.py:485
msgid "sinc(x), return the sinc of x. This is given by sin(x) / x."
msgstr ""
"sinc(x), renvoie le sinus cardinal de x. Donné par la formule sin(x) / x."

#: functions.py:491
msgid ""
"sqrt(x), return the square root of x. This is the value for which the square "
"equals x. Defined for x >= 0."
msgstr ""
"sqrt(x), retourne la racine carrée de x. C'est la valeur dont le carré vaut "
"x. Défini pour x >= 0."

#: functions.py:497
msgid "square(x), return x * x"
msgstr "square(x), retourne le carré de x, c'est à dire x * x"

#: functions.py:505
msgid "sub(x, y), return x - y"
msgstr "sub(x, y), retourne x - y"

#: functions.py:511
msgid ""
"tan(x), return the tangent of x. This is the slope of the line from the "
"origin of the unit circle to the point on the unit circle defined by the "
"angle x. Given by sin(x) / cos(x)"
msgstr ""
"tan(x), retourne la tangente de x. C'est la pente de la ligne partant de "
"l'origine du cercle trigonométrique et allant au point du cercle unité "
"défini par l'angle x. Donné par la formule sin(x) / cos(x)"

#: functions.py:519
msgid "tanh(x), return the hyperbolic tangent of x. Given by sinh(x) / cosh(x)"
msgstr ""
"tanh(x), retourne la tangente hyperbolique de x. Donné par la formule sinh(x)"
" / cosh(x)"

#: functions.py:525
msgid ""
"xor(x, y), logical xor. Returns True if either x is True (and y is False) or "
"y is True (and x is False), else returns False"
msgstr ""
"xor(x, y), \"ou exclusif\" logique. Retourne True si (x égale True et y "
"égale False) ou bien (x égale False et y égale True), sinon retourne False"

#: toolbars.py:57
msgid "Help"
msgstr "Aide"

#: toolbars.py:132
msgid "Copy"
msgstr "Copier"

#: toolbars.py:133
msgid "<ctrl>c"
msgstr "<ctrl>c"

#: toolbars.py:137
msgid "Cut"
msgstr "Couper"

#: toolbars.py:140
msgid "<ctrl>x"
msgstr "<ctrl>x"

#: toolbars.py:148
msgid "Paste"
msgstr "Coller"

#: toolbars.py:160
msgid "Square"
msgstr "Carré"

#: toolbars.py:167
msgid "Square root"
msgstr "Racine carrée"

#: toolbars.py:174
msgid "Inverse"
msgstr "Inverse"

#: toolbars.py:183
msgid "e to the power x"
msgstr "e puissance x"

#: toolbars.py:190
msgid "x to the power y"
msgstr "x puissance y"

#: toolbars.py:197
msgid "Natural logarithm"
msgstr "Logarithme naturel"

#: toolbars.py:206
msgid "Factorial"
msgstr "Factoriel"

#: toolbars.py:220
msgid "Sine"
msgstr "Sinus"

#: toolbars.py:225
msgid "Cosine"
msgstr "Cosinus"

#: toolbars.py:230
msgid "Tangent"
msgstr "Tangente"

#: toolbars.py:237
msgid "Arc sine"
msgstr "Arc sinus"

#: toolbars.py:242
msgid "Arc cosine"
msgstr "Arc cosinus"

#: toolbars.py:247
msgid "Arc tangent"
msgstr "Arc tangente"

#: toolbars.py:254
msgid "Hyperbolic sine"
msgstr "Sinus hyperbolique"

#: toolbars.py:259
msgid "Hyperbolic cosine"
msgstr "Cosinus hyperbolique"

#: toolbars.py:264
msgid "Hyperbolic tangent"
msgstr "Tangente hyperbolique"

#: toolbars.py:277
msgid "Logical and"
msgstr "ET logique"

#: toolbars.py:282
msgid "Logical or"
msgstr "OU logique"

#: toolbars.py:293
msgid "Equals"
msgstr "Egale"

#: toolbars.py:297
msgid "Not equals"
msgstr "Différent"

#: toolbars.py:310
msgid "Pi"
msgstr "Pi"

#: toolbars.py:316
msgid "e"
msgstr "e"

#: toolbars.py:320
msgid "γ"
msgstr "γ"

#: toolbars.py:325
msgid "φ"
msgstr "φ"

#: toolbars.py:333
msgid "Plot"
msgstr "Graphique"

#: toolbars.py:338
msgid "Degrees"
msgstr "Degrés"

#: toolbars.py:339
msgid "Radians"
msgstr "Radians"

#: toolbars.py:344
msgid "Degrees / Radians"
msgstr "Degrés / Radians"

#: toolbars.py:354
msgid "Exponent / Scientific notation"
msgstr "Exposant / Notation scientifique"

#: toolbars.py:365
msgid "Number of shown digits"
msgstr "Nombre de chiffres visibles"

#: toolbars.py:377
msgid "Integer formatting base"
msgstr "Base de format des entiers"

#: astparser.py:39
msgid ""
"plot(eqn, var=-a..b), plot the equation 'eqn' with the variable 'var' in the "
"range from a to b"
msgstr ""
"plot(eqn, var=-a..b), trace l'équation 'eqn' avec la variable 'var' dans "
"l'intervalle de a à b"

#: astparser.py:61
#, python-format
msgid "Parse error at %d"
msgstr "Erreur d'analyse syntaxique en %d"

#: astparser.py:75 astparser.py:109
#, python-format
msgid "Error at '%s', position: %d"
msgstr "Erreur à '%s', position: %d"

#: astparser.py:88
msgid "Syntax Error."
msgstr "Erreur de syntaxe."

#: astparser.py:95
msgid "Syntax Error!"
msgstr "Erreur de syntaxe!"

#: astparser.py:135
msgid "This is just a test topic, use help(index) for the index"
msgstr ""
"Ceci est juste une rubrique de test. Utiliser help(index) pour afficher "
"l'index des rubriques"

#: astparser.py:148
msgid "Use help(test) for help about 'test', or help(index) for the index"
msgstr ""
"Utiliser help(test) où 'test' est la rubrique recherchée, ou help(index) "
"pour accéder à l'index des rubriques"

#. TRANS: This command is descriptive, so can be translated
#: astparser.py:152
msgid "index"
msgstr "index"

#: astparser.py:152
msgid "topics"
msgstr "rubriques"

#: astparser.py:153
msgid "Topics"
msgstr "Rubriques"

#. TRANS: This command is descriptive, so can be translated
#: astparser.py:161
msgid "variables"
msgstr "variables"

#: astparser.py:162
msgid "Variables"
msgstr "Variables"

#. TRANS: This command is descriptive, so can be translated
#: astparser.py:168
msgid "functions"
msgstr "fonctions"

#: astparser.py:169
msgid "Functions"
msgstr "Fonctions"

# aide(index) ou help(index) ?
#: astparser.py:178
#, python-format
msgid "No help about '%s' available, use help(index) for the index"
msgstr ""
"L'aide sur '%s' n'est pas disponible, utilisez help(index) pour afficher "
"l'index des rubriques"

#: astparser.py:508
msgid "help"
msgstr "aide"

#: astparser.py:515
msgid "Recursion detected"
msgstr "Récursion détectée"

#: astparser.py:539
#, python-format
msgid "Function '%s' not defined"
msgstr "La fonction '%s' n'est pas définie"

#: astparser.py:541
#, python-format
msgid "Variable '%s' not defined"
msgstr "La variable '%s' n'est pas définie"

#: astparser.py:551
#, python-format
msgid "Attribute '%s' does not exist"
msgstr "L'attribut '%s' n'existe pas"

#: astparser.py:654
msgid "Parse error"
msgstr "Erreur de syntaxe"

#: astparser.py:659
msgid "Multiple statements not supported"
msgstr "Déclarations multiples non gérées"

#: astparser.py:683
msgid "Internal error"
msgstr "Erreur interne"

#. TRANS: multiplication symbol (default: '×')
#: mathlib.py:84
msgid "mul_sym"
msgstr "mul_sym"

#. TRANS: division symbol (default: '÷')
#: mathlib.py:89
msgid "div_sym"
msgstr "div_sym"

#. TRANS: equal symbol (default: '=')
#: mathlib.py:94
msgid "equ_sym"
msgstr "equ_sym"

#: mathlib.py:227
msgid "Undefined"
msgstr "Indéfini"

#: mathlib.py:237
msgid "Error: unsupported type"
msgstr "Erreur : type non pris en charge"

#: layout.py:113
msgid "Clear"
msgstr "Effacer"

#: layout.py:151 layout.py:195
msgid "Edit"
msgstr "Éditer"

#: layout.py:156 layout.py:196
msgid "Algebra"
msgstr "Algèbre"

#: layout.py:161 layout.py:198
msgid "Trigonometry"
msgstr "Trigonométrie"

# Boolean est renvoie généralement  à un type de donnée (vrai/faux, 1/0, etc) - LLASKE: "Valeur Booléenne" ne tiens par sur l'affichage.
#: layout.py:166 layout.py:199
msgid "Boolean"
msgstr "Booléen"

#: layout.py:175 layout.py:200
msgid "Miscellaneous"
msgstr "Divers"

#: layout.py:229
msgid "Label:"
msgstr "Étiquette:"

#: layout.py:278
msgid "All equations"
msgstr "Toutes les équations"

#: layout.py:279
msgid "My equations"
msgstr "Mes équations"

#: layout.py:280
msgid "Show variables"
msgstr "Afficher les variables"

#: calculate.py:109
#, python-format
msgid "Equation.parse() string invalid (%s)"
msgstr "Equation.parse() chaîne invalide (%s)"

#: calculate.py:525
msgid "Can not assign label: will cause recursion"
msgstr "Assignation d'étiquette impossible : génère une récursion"

#: calculate.py:620
#, python-format
msgid "Writing to journal (%s)"
msgstr "Écriture dans le journal (%s)"

#: calculate.py:932
msgid "button_pressed(): invalid type"
msgstr "button_pressed() : type invalide"

#~ msgid ""
#~ "This is the place to get the answer to a quick problem, but that is not the "
#~ "limit! You can also explore Algebra, Trigonometry, Boolean and more!"
#~ msgstr ""
#~ "Tu peux obtenir ici une réponse à un problème rapide, mais il n'y a pas de "
#~ "limite ! Tu peux aussi explorer les modes algèbre, trigonométrie, booléen et "
#~ "bien d'autres choses encore !"

# ligne %d ? caractère %d ?
#, python-format
#~ msgid "Error at %d"
#~ msgstr "Erreur à %d"

#~ msgid "fac"
#~ msgstr "fac"

#~ msgid ""
#~ "And(x, y), logical and. Returns True if x and y are True, else returns False"
#~ msgstr ""
#~ "And(x, y), ET logique. Renvoie True si x et y égalent Vrai, renvoie False "
#~ "sinon"

#~ msgid "Number does not look binary in base 10"
#~ msgstr "Le nombre n'apparaît pas comme un nombre binaire en base 10"

#~ msgid ""
#~ "cosh(x), return the hyperbolic cosine of x. Given by (exp(x) + exp(-x)) / 2"
#~ msgstr ""
#~ "cosh(x), renvoie le cosinus hyperbolique de x. Donné par la formule (exp(x) "
#~ "+ exp(-x)) / 2"

#~ msgid "fac(x), return the factorial of x. Given by x * (x - 1) * (x - 2) * ..."
#~ msgstr ""
#~ "fac(x), renvoie le factoriel de x. Donné par la formule x * (x - 1) * (x - "
#~ "2) * ..."

#~ msgid ""
#~ "mod(x, y), return the modulus of x with respect to y. This is the remainder "
#~ "after dividing x by y."
#~ msgstr ""
#~ "mod(x, y), renvoie le modulo de x par rapport à y. Il s'agit du reste après "
#~ "la division de x par y."
